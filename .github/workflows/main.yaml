name: Phrike project

on: [push, pull_request]

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  PROJECT_PATH: .
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: dind-size-xl
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
         #- StandaloneOSX # Build a macOS standalone (Intel 64-bit).
         #- StandaloneWindows # Build a Windows standalone.
         #- StandaloneWindows64 # Build a Windows 64-bit standalone.
         #- StandaloneLinux64 # Build a Linux 64-bit standalone.
         #- iOS # Build an iOS player.
         #- Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    steps:
      - name: Set up context for buildx
        if: env.SHOULD == 'true'
        id: buildx-context
        run: |
          docker context create builders
          
      - name: Set up builder
        uses: docker/setup-buildx-action@v2
        if: env.SHOULD == 'true'
        id: buildx
        with:
          endpoint: builders
          install: true

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          lfs: false
      
      # - uses: game-ci/unity-test-runner@v2
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #   with:
      #     projectPath: ${{ env.PROJECT_PATH }}
      #     githubToken: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          PROJECT_PATH: .
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Setup ENV
        run: |
          echo "SERVICE_NAME=${REPO_PATH##*/}" >> $GITHUB_ENV
          echo "DOCKER_REPOSITORY=${REPO_PATH,,}/${CONTAINER_NAME,,}" >> $GITHUB_ENV
          echo "TAG=sha-$(git rev-parse --short=8 ${{ github.sha }})" >> $GITHUB_ENV
      # - if: ${{ targetPlatform == 'WebGL' }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Delete older images
        uses: actions/delete-package-versions@v3
        with: 
          package-name: ${{ env.IMAGE_NAME }}
          min-versions-to-keep: 1
          delete-only-pre-release-versions: "true"

      # - name: Update application in Argo-CD
      #   run: |
      #     argocd app set ${{ env.SERVICE_NAME }} \
      #       --auth-token "${{ secrets.ARGO_CD_TOKEN }}" \
      #       --grpc-web \
      #       --parameter "image.tag=${{ env.TAG }}" \
      #       --server argocd.deadplanet.net \
      #       --parameter global.tier=dev

      # - name: Trigger Argo-CD sync
      #   run: |
      #     argocd app sync ${{ env.SERVICE_NAME }} \
      #       --auth-token "${{ secrets.ARGO_CD_TOKEN }}" \
      #       --grpc-web \
      #       --server argocd.deadplanet.net
